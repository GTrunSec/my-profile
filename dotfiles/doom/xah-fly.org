#+TITLE: Xah-fly key
#+AUTHOR: GTrunSec
#+EMAIL: gtrunsec@hardenedlinux.org
#+DATE: 30 December 2019
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en cn
#+SETUPFILE: ~/Documents/my-blog/public/theme/org-html-themes/setup/theme-readtheorg.setup
#+hugo_publishdate: (0 5)
#+hugo_auto_set_lastmod: t
#+HUGO_categories:
#+HUGO_tags:
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
* pre setting && load

#+begin_src emacs-lisp :tangle "xah-fly.el"
(require 'xah-fly-keys)

(use-package! xah-fly-keys
  :config
  (add-hook 'xah-fly-command-mode-activate-hook
            (lambda ()
              (setq xah-fly-insert-state-q nil)))
  :init

  (xah-fly-keys 1))
  ;; (xah-fly-keys-set-layout "qwerty")
#+END_SRC

* xah-fly-leader-key-map
#+begin_src emacs-lisp :tangle "xah-fly.el"
  ;; make xah-fly-keys 【leader 8】 as prefix for my-keymap
  (xah-fly--define-keys
   (define-prefix-command 'xah-fly-leader-key-map)
   '(
     ("8" . my-keymap)
     ("2" . org-keymap)
     ("m" . magit-key)
     ("w" . window-key)


     ;;timer
     ("ti" . insert-current-date-time-inactive)
     ("ta" . insert-current-date-time-active)
     ("tc" . insert-current-date-time)
     ;;find file
     ("fr" . counsel-recentf)
     ("fp" . doom/find-file-in-private-config)
     ("<tab>" . spacemacs/alternate-buffer)
     ("ff" . counsel-file-jump)
     ("RET" . helm-bookmarks)
     ;; treemacs
     ("tt" . +treemacs/toggle)
     ("tf" . +treemacs/find-file)
     ;; helm
     ("bb" . switch-to-buffer)
     ("bs" . bookmark-set)
     ("bm" . bookmark-bmenu-list)
     ("bt" . bm-toggle)
     ;; isearch
     ("y" . xah-search-current-word)
     ;; search
     ("sa" . counsel-ag)
     ("sr" . counsel-rg)
     ;; dired
     ("dw" . dired-other-window)
     ("df" . dired-other-frame)
))

#+END_SRC
* xah-fly-command-mode-init
#+begin_src emacs-lisp :tangle "xah-fly.el"
(defun xah-fly-command-mode-init ()
  "Set command mode keys.
Version 2017-01-21"
  (interactive)
  (xah-fly--define-keys
   xah-fly-key-map
   '(
     ;; IMPORTANT, These keys are all dvorak keys
     ("~" . nil)
     (":" . nil)

     ("SPC" . xah-fly-leader-key-map)
     ("q" . quit-window)
     ("a" . counsel-M-x)
     ("e" . sunrise-dired)
     ("i" . previous-line)
     ("k" . next-line )
     ("b" . backward-word)
     ("h" . forward-word)
     ("l" . backward-char)
     ("j" . forward-char)
     ("f" . xah-fly-insert-mode-activate)
     ("[" . xah-backward-punct )
     ("]" . xah-forward-punct)
     ("g" . avy-goto-char-2)
     ("y" . undo)
     ("v" . xah-paste-or-paste-previous)
     ("c" . xah-copy-line-or-region)
     ("x" . xah-cut-line-or-region)
     ("t" . set-mark-command)
     ("2" . org-agenda)
     ("3" . notdeft)
     ("4" . adq/helm-bm-list-all)
     ("6" . xah-select-block)
     ("7" . xah-select-line)
     ("8" . xah-extend-selection)
     ("9" . xah-select-text-in-quote)
     ("0" . xah-pop-local-mark-ring)
     ("n" . isearch-forward)
     ))
    (define-key xah-fly-key-map (kbd "p") 'gtrun-xah-fly-key)
    (define-key xah-fly-key-map (kbd "-") 'gtrun-xah-minus-fly-key)
    (define-key xah-fly-key-map (kbd "/") 'gtrun-xah-slash-fly-key)
    (define-key xah-fly-key-map (kbd ",") 'gtrun-xah-comma-fly-key)
    (define-key xah-fly-key-map (kbd ".") 'gtrun-xah-dot-fly-key)

    (when (eq system-type 'gnu/linux)
      (define-key xah-fly-key-map (kbd "r") 'eaf-open)
      (define-key xah-fly-key-map (kbd "w") 'snails)
      )
  )
#+end_src
* define-key xah-fly-key-map
#+begin_src emacs-lisp :tangle "xah-fly.el"
(define-key xah-fly-key-map (kbd "C-a") 'beginning-of-visual-line)
(define-key xah-fly-key-map (kbd "C-0") 'delete-region)
(define-key xah-fly-key-map (kbd "C-n") 'next-line)


(when (display-graphic-p)
 (define-key key-translation-map (kbd "ESC") (kbd "C-x c"))
)


(define-key xah-fly-key-map (kbd "<f4>") 'xah-fly-command-mode-activate)
(define-key xah-fly-key-map (kbd "C-x c") 'xah-fly-command-mode-activate)
(define-key xah-fly-key-map (kbd "C-s") 'swiper-isearch)
(define-key xah-fly-key-map (kbd "C-c w") 'helm-org-rifle)


(define-key xah-fly-key-map (kbd "<f5>") 'awesome-tab-ace-jump)
(define-key xah-fly-key-map (kbd "C-;") 'maple-iedit-match-all)
(define-key xah-fly-key-map (kbd "C-c i") 'counsel-imenu)
;; scrolling
(define-key xah-fly-key-map (kbd "C-v") 'scrollkeeper-contents-up)
;; rekey  kmacro-start-macro-or-insert-counter
(define-key xah-fly-key-map (kbd "<f3>") 'gtrun/hydra-org-starter/body)
#+end_src

#+RESULTS:
: gtrun/hydra-org-starter/body

** special-key-to-mode-map
#+begin_src emacs-lisp :tangle "xah-fly.el"
   (defun gtrun-xah-dot-fly-key ()
        "key `.'"
        (interactive)
        (cond
         ;; ((eq major-mode 'dired-mode) (call-interactively 'd))
         ((eq major-mode 'dired-mode) (call-interactively 'hydra-dired/body))
         ((eq major-mode 'w3m-mode) (call-interactively 'scrollkeeper-contents-up))
         ((eq major-mode 'org-mode) (call-interactively 'org-edit-src-code))
         ((eq major-mode 'elfeed-show-mode) (call-interactively 'scrollkeeper-contents-up))
         ((eq major-mode 'elfeed-search-mode) (call-interactively 'scrollkeeper-contents-up))
         ((eq major-mode 'julia-mode) (call-interactively 'ess-julia-mode))
         (t nil)))

      (defun gtrun-xah-comma-fly-key ()
        "key `,'"
        (interactive)
        (cond
         ;; ((eq major-mode 'dired-mode) (call-interactively 'd))
         ((eq major-mode 'w3m-mode) (call-interactively 'scrollkeeper-contents-down))
         ((eq major-mode 'elfeed-show-mode) (call-interactively 'scrollkeeper-contents-down))
         ((eq major-mode 'elfeed-search-mode) (call-interactively 'scrollkeeper-contents-down))
         (t nil)))

      (defun gtrun-xah-slash-fly-key ()
        "key `/'"
        (interactive)
        (cond
         ;; ((eq major-mode 'dired-mode) (call-interactively 'd))
         ((eq major-mode 'dired-mode) (call-interactively 'vinegar/dired-diff))
         ((eq major-mode 'w3m-mode) (call-interactively 'w3m-bookmark-add-current-url))
         ((eq major-mode 'org-agenda-mode) (call-interactively 'org-agenda-filter-by-tag))
         ((eq major-mode 'elfeed-search-mode) (call-interactively 'elfeed-update))
         ((eq major-mode 'ess-julia-mode) (call-interactively 'julia-mode))
         (t nil)))

      (defun gtrun-xah-semicolon-fly-key ()
        "key `;'"
        (interactive)
        (cond
         ;; ((eq major-mode 'dired-mode) (call-interactively 'd))

         (t nil)))

      (defun gtrun-xah-apostrophe-fly-key ()
        "key `''"
        (interactive)
        (cond
         ;; ((eq major-mode 'dired-mode) (call-interactively 'd))

         (t nil)))
      (defun gtrun-xah-equality-fly-key ()
        "key `='"
        (interactive)
        (cond
         ;; ((eq major-mode 'dired-mode) (call-interactively 'd))
         (t nil)))


      (defun gtrun-xah-fly-key ()
        "key `p'"
        (interactive)
        (cond
         ;; ((eq major-mode 'dired-mode) (call-interactively 'd))
         ((eq major-mode 'dired-mode) (call-interactively 'xah-open-in-external-app))
         (t nil)))


      (defun gtrun-xah-minus-fly-key ()
        "key `-'"
        (interactive)
        (cond
         ;; ((eq major-mode 'dired-mode) (call-interactively 'd))
         ((eq major-mode 'dired-mode) (call-interactively 'vinegar/up-directory))
         (t nil)))
#+end_src

** Color
#+begin_src emacs-lisp :tangle "xah-fly.el"
;; (defun my-highlight-line-on () (global-hl-line-mode 1))
;; (defun my-highlight-line-off () (global-hl-line-mode 0))

;; (add-hook! 'xah-fly-command-mode-activate-hook 'my-highlight-line-on)
;; (add-hook! 'xah-fly-insert-mode-activate-hook  'my-highlight-line-off)

;; (defun my-xfk-command-color () (set-background-color "DeepSkyBlue"))
;; (defun my-xfk-insert-color () (set-background-color "IndianRed"))

;; (add-hook! 'xah-fly-command-mode-activate-hook 'my-xfk-command-color)
;; (add-hook! 'xah-fly-insert-mode-activate-hook  'my-xfk-insert-color)
#+end_src

* magit
#+begin_src emacs-lisp :tangle "xah-fly.el"
  (xah-fly--define-keys
   ;; create a keymap org-keymap
   (define-prefix-command 'magit-key)
   '(
     ("s" . magit)
     ))
#+end_src

* window
#+begin_src emacs-lisp :tangle "xah-fly.el"
  (xah-fly--define-keys
   ;; create a keymap org-keymap
   (define-prefix-command 'window-key)
   '(
     ("r" . split-window-right)
     ("b" . split-window-below)
     ("d" . delete-window)
     ("o" . delete-other-windows)
     ))
#+end_src
* My-search
#+begin_src emacs-lisp :tangle "xah-fly.el"

  (xah-fly--define-keys
   ;; create a keymap my-keymap
   (define-prefix-command 'my-keymap)
   '(
     ("a" . counsel-ag)
     ("r" . counsel-rg)
     ;;
     ))
#+END_SRC
* org-mode
#+begin_src emacs-lisp :tangle "xah-fly.el"
  (xah-fly--define-keys
   ;; create a keymap org-keymap
   (define-prefix-command 'org-keymap)
   '(
     ("i" . org-clock-in)
     ("o" . org-clock-out)
     ))
;; (defun my-xah-fly-key-org-keymap ()
;;   (interactive)
;;   (require 'xah-fly-keys)
;;   (xah-fly--define-keys
;;    ;; create a keymap org-keymap
;;    (define-prefix-command 'xah-fly-leader-key-map)
;;    '(
;;      ("i" . org-clock-in)
;;      ("o" . org-clock-out)
;;      ))
;; )
;; (add-hook! 'org-mode-hook 'my-xah-fly-key-org-keymap)
#+end_src
