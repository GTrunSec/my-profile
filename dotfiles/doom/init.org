#+TITLE: My doom config
- [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org][doom-emacs/getting_started.org at develop Â· hlissner/doom-emacs]]
* init.el
#+begin_src emacs-lisp :tangle yes
;;; init.el -*- lexical-binding: t; -*-

;; Copy this file to ~/.doom.d/init.el or ~/.config/doom/init.el ('doom install'
;; will do this for you). The `doom!' block below controls what modules are
;; enabled and in what order they will be loaded. Remember to run 'doom refresh'
;; after modifying it.
;;
;; More information about these modules (and what flags they support) can be
;; found in modules/README.org.

(doom! :input
       chinese
       ;;japanese

       :completion
       company           ; the ultimate code completion backend
       helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ivy               ; a search engine for love and life

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;fill-column       ; a `fill-column' indicator
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       modeline          ; snazzy, Atom-inspired modeline, plus API
       nav-flash         ; blink the current line after jumping
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup            ; tame sudden yet inevitable temporary windows
        +all             ; catch all popups that start with an asterix
        +defaults)       ; default popup rules
       ;;pretty-code       ; replace bits of code with pretty symbols
       ;;tabs              ; an tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces

       :editor
       ;;(evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       ;;god               ; run Emacs commands without modifier keys
       fold              ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;lispy             ; vim for lisp, for people who dont like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ibuffer           ; interactive buffer management
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; a consistent, cross-platform shell (WIP)
       ;;shell             ; a terminal REPL for Emacs
       ;;term              ; terminals in Emacs
       ;;vterm             ; another terminals in Emacs

       :tools
       ;;ansible
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       flycheck          ; tasing you for every semicolon you forget
       ;;flyspell          ; tasing you for misspelling mispelling
       ;;gist              ; interacting with github gists
       (lookup           ; helps you navigate your code and documentation
        +docsets)        ; ...or in Dash docsets locally
       lsp
       ;;macos             ; MacOS-specific commands
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp
       ;;wakatime

       :lang
       ;;agda              ; types of types of types of types...
       ;;assembly          ; assembly for fun or debugging
       cc                ; C/C++/Obj-C madness
       ;;clojure           ; java with a lisp
       common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;;erlang            ; an elegant language for a more civilized age
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ess               ; emacs speaks statistics
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp           ; ML stands for Microsoft's Language
       go                ; the hipster dialect
       (haskell +intero) ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ;
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       ;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
       julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       latex             ; writing papers in Emacs has never been so fun
       ;;lean
       ;;ledger            ; an accounting system in Emacs
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org              ; organize your plain life in plain text
        +dragndrop       ; drag & drop files/images into org buffers
        +hugo            ; use Emacs for hugo blogging
        +ipython         ; ipython/jupyter support for babel
        +pandoc          ; export-with-pandoc support
        ;+pomodoro        ; be fruitful with the tomato technique
        +present)        ; using org-mode for presentations
       ;;perl              ; write code no one else can comprehend
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;rest              ; Emacs as a REST client
       ;;ruby              ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;scheme            ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes

       :email
       ;;(mu4e +gmail)       ; WIP
       ;;notmuch             ; WIP
       ;;(wanderlust +gmail) ; WIP

       ;; Applications are complex and opinionated modules that transform Emacs
       ;; toward a specific purpose. They may have additional dependencies and
       ;; should be loaded late.
       :app
       ;;calendar
       ;;irc               ; how neckbeards socialize
       (rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought
       ;;(write            ; emacs for writers (fiction, notes, papers, etc.)
       ;; +wordnut         ; wordnet (wn) search
       ;; +langtool)       ; a proofreader (grammar/style check) for Emacs

       :config
       ;; For literate config users. This will tangle+compile a config.org
       ;; literate config in your `doom-private-dir' whenever it changes.
       ;;literate

       ;; The default module sets reasonable defaults for Emacs. It also
       ;; provides a Spacemacs-inspired keybinding scheme and a smartparens
       ;; config. Use it as a reference for your own modules.
       (default +smartparens)
         :private
         spacemacs-default
)
#+end_src
* package.el
** basic package
#+begin_src emacs-lisp :tangle "packages.el"
(package! bm)
(package! w3m)
(package! discover :recipe (:host github :repo "mickeynp/discover.el"))
(package! xah-fly-keys :recipe (:host github :repo "xahlee/xah-fly-keys"))
(package! hungry-delete)
(package! flymake-json)
(package! maple-iedit :recipe (:host github :repo "honmaple/emacs-maple-iedit"))
(package! yatemplate)
#+end_src
** org-mode
#+begin_src emacs-lisp :tangle "packages.el"
(package! ox-hugo)
(package! company-english-helper :recipe (:host github :repo "manateelazycat/company-english-helper"))
(package! org-super-agenda)
(package! org-starter)
(package! helm-deft :recipe (:host github :repo "dfeich/helm-deft"))
#+end_src
** code
#+begin_src emacs-lisp :tangle "packages.el"
(package! awesome-pair :recipe (:host github :repo "manateelazycat/awesome-pair"))
(package! plantuml-mode)
(package! ccls)
(package! company-tabnine)
(package! jupyter)
;;(package! ob-julia :recipe (:host github :repo "gjkerns/ob-julia"))
#+end_src
#+begin_src emacs-lisp :tangle "config.el"
(use-package! awesome-pair)
(use-package! company-tabnine
  :config
  (setq company-tabnine--disable-next-transform nil)
  (defun my-company--transform-candidates (func &rest args)
    (if (not company-tabnine--disable-next-transform)
        (apply func args)
      (setq company-tabnine--disable-next-transform nil)
      (car args)))

  (defun my-company-tabnine (func &rest args)
    (when (eq (car args) 'candidates)
      (setq company-tabnine--disable-next-transform t))
    (apply func args))

  (advice-add #'company--transform-candidates :around #'my-company--transform-candidates)
  (advice-add #'company-tabnine :around #'my-company-tabnine)
)

#+end_src
** third-part
#+begin_src emacs-lisp :tangle "packages.el"
(package! eyebrowse)
(package! cnfonts)
(package! scrollkeeper :recipe (:host github :repo "alphapapa/scrollkeeper.el"))
(package! elfeed-goodies)
(package! awesome-tab :recipe (:host github :repo "manateelazycat/awesome-tab"))
(package! ob-session-async :recipe (:host github :repo "jackkamm/ob-session-async"))
#+end_src
* config.el
** load-package
#+begin_src emacs-lisp :tangle "config.el"
(load! "xah-fly.el")
(load! "./modules/my-linux.el")
(load! "./modules/my-macos.el")
(load! "my-code.el")
(load! "my-org.el")
#+end_src
** default
#+begin_src emacs-lisp :tangle "config.el"
(setq-default history-length 1000)
(setq create-lockfiles nil)
;; (setq browse-url-browser-function 'browse-url-Chrome)
;; https://emacs.stackexchange.com/questions/5603/how-to-quickly-copy-move-file-in-emacs-dired
(setq dired-dwim-target t)
(add-hook! 'xah-fly-command-mode-activate-hook 'xah-fly-save-buffer-if-file)
#+end_src

* org-mode
** type
#+begin_src emacs-lisp :tangle "my-org.el"
(use-package! company-english-helper)
(use-package! ox-hugo)
(use-package! ob-async)
(use-package! ob-session-async)
#+end_src
** setting
*** org-global
#+begin_src emacs-lisp :tangle "my-org.el"
(setq org-clock-into-drawer nil)
(setq org-agenda-start-day "-1d")
(setq org-agenda-span 3)
(setq org-time-clocksum-format '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))
(setq org-archive-location (concat "%s_archive_" (format-time-string "%Y" (current-time)) "::"))
;; Removes clocked tasks with 0:00 duration
(setq org-clock-out-remove-zero-time-clocks t)
;; Change task state to STARTED when clocking in
(setq org-clock-in-switch-to-state "â INPROCESS")
(setq org-src-fontify-natively t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t
      org-src-window-setup 'current-window)
(setq org-agenda-time-leading-zero t)
#+end_src


*** org-babel
#+begin_src emacs-lisp :tangle "my-org.el"
;; Todo part



(defun my-org-confirm-babel-evaluate (lang _body)
  "Return t if LANG is in whitelist."
  (not (or (string= lang "ditaa")
           (string= lang "dot")
           (string= lang "R")
           (string= lang "jupyter-R")
           (string= lang "python")
           (string= lang "jupyter-julia")
           (string= lang "jupyter-python")
           (string= lang "plantuml"))))
  (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+end_src

#+begin_src emacs-lisp :tangle "my-org.el"
;; ä¹¾ãå¤ãåãé¢ãéãå·½ãè®ãå
(setq org-bullets-bullet-list '("â°" "â·" "âµ" "â²"  "â³" "â´"  "â¶"  "â±" ))
#+end_src
*** after org
#+begin_src emacs-lisp :tangle "my-org.el"


(setq org-agenda-custom-commands
      '(("z" "GtruN Agenda"
         ((agenda "" ((org-agenda-span 5)
                      (org-agenda-start-day "-1d")
                      (org-super-agenda-groups
                       '((:name "Today List"
                                :time-grid t
                                :date today
                                :todo "â INPROCESS"
                                :scheduled today
                                :order 1)))))
          (alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups
                        '((:name "Next to do"
                                 :priority>= "B"
                                 :order 2)
                          (:name "Important"
                                 :todo "â° Important"
                                 :order 6)
                          (:name "Due Today"
                                 :deadline today
                                 :order 3)
                          (:name "Due Soon"
                                 :deadline future
                                 :order 8)
                          (:name "Overdue"
                                 :deadline past
                                 :order 20)
                          (:name "Issues"
                                 :tag "Issue"
                                 :order 12)
                          (:name "Projects"
                                 :tag "Project"
                                 :order 14)
                          (:name "Emacs"
                                 :tag "Emacs"
                                 :order 13)
                          (:name "Research"
                                 :tag "Research"
                                 :order 15)
                          (:name "To read"
                                 :tag "BOOK"
                                 :order 30)
                          (:name "Waiting"
                                 :todo "â WAITING"
                                 :order 18)
                          (:name "trivial"
                                 :priority<= "C"
                                 :todo ("SOMEDAY")
                                 :order 90)
                          (:discard (:tag ("Chore" "Routine" "Daily")))))))))

        ("b" . "BOOK")

        ("bb" "Search tags in todo, note, and archives"
         search "+{:book\\|books:}")

        ("bd" "BOOK TODO List"
         search "+{^\\*+\\s-+\\(\\â INPROCESS|â TODO\\|WAITING\\)\\s-} +{book\\|books}")

        ("d" "ALL DONE OF TASKS"
         search "+{^\\*+\\s-+\\(â DONE\\|â CANCELED\\)\\s-}")
        ))
#+end_src

** org-key
#+begin_src emacs-lisp :tangle "my-org.el"
(eval-after-load "org"
  '(require 'ox-md nil t))
(define-key! org-mode-map (kbd "C-<return>") 'org-insert-heading-respect-content)
#+end_src
** super-agenda
#+begin_src emacs-lisp :tangle "my-org.el"
(use-package! org-super-agenda
:config
(add-hook! 'after-init-hook 'org-super-agenda-mode)
 (require 'org-habit)
  ;; (setq org-agenda-time-grid
  ;;       '((daily today)
  ;;         ))
  (setq
   org-agenda-skip-scheduled-if-done t
   org-agenda-skip-deadline-if-done t
   org-agenda-include-deadlines t
   org-agenda-include-diary nil
   org-agenda-block-separator nil
   org-agenda-compact-blo0cks t
   org-agenda-start-with-log-mode t)



)
#+end_src
** org-starter
#+begin_src emacs-lisp :tangle "my-org.el"
(use-package org-starter
  :config
  (org-starter-def "~/Documents/org-notes"
                   :files
                   ("gtd.org" :agenda t :key "g" :refile (:maxlevel . 5))
                   ("notes.org" :agenda t :key "n" :refile (:maxlevel .5 ))
                   ("myself.org" :agenda t)
                   ("Habit.org" :agenda t)
                   ("NSM-GTD/workflow.org" :agenda t :required t)
                   ("NSM-GTD/NsmOrg.org" :agenda t :required t)
                   )
  (org-starter-def "~/.doom.d"
                   :files
                   ("init.org" :key "i" :refile (:maxlevel . 5))
                   ;;("nix.org" :key "x" :refile (:maxlevel . 5))
                   )
  (org-starter-def "~/.config/nixpkgs"
                   :files
                   ("README.org")
                   ("global-readme.org")
                   ("dotfiles/wallpaper/wallpaper.org" :agenda nil)
                   )
  :bind
  (
   ("C-c e" . org-starter-select-file))
  ;; "C-c e" . org-starter-refile-by-key))
  )
#+end_src

** helm-def
#+begin_src emacs-lisp :tangle "my-org.el"
(use-package! helm-deft
  :config
  (setq helm-deft-extension "org")
  (setq helm-deft-dir-list '(
                             "~/Documents/org-notes/art"
                             "~/Documents/org-notes/NSM-GTD"
                             "~/Documents/org-notes/post"
                             "~/Documents/org-notes/course"
                             "~/Documents/org-notes/post/myself"
                             "~/project/my-code/my-nix"
                             ;; "~/project/global-profile/global-doc"
                             )))
#+end_src

** elfeed
#+begin_src emacs-lisp :tangle "config.el"
(use-package! elfeed
  :bind (:map elfeed-search-mode-map
          ("q" . bjm/elfeed-save-db-and-bury)
          ("Q" . bjm/elfeed-save-db-and-bury)
          ("m" . elfeed-toggle-star)
          )
  :config
(global-set-key (kbd "C-x w") 'elfeed)
(setf url-queue-timeout 30)
(setq elfeed-db-directory "~/Dropbox/shared/elfeeddb")
;;functions to support syncing .elfeed between machines
;;makes sure elfeed reads index from disk before launching
(defun bjm/elfeed-load-db-and-open ()
  "Wrapper to load the elfeed db from disk before opening"
  (interactive)
  (elfeed-db-load)
  (elfeed)
  (elfeed-search-update--force))

;;write to disk when quiting

(defun bjm/elfeed-save-db-and-bury ()
  "Wrapper to save the elfeed db to disk before burying buffer"
  (interactive)
  (elfeed-db-save)
  (quit-window))

(defun elfeed-mark-all-as-read ()
  (interactive)
  (mark-whole-buffer)
  (elfeed-search-untag-all-unread))



  )

(use-package! elfeed-goodies
  :config
  (elfeed-goodies/setup))

(use-package! elfeed-org
:config
(setq rmh-elfeed-org-files (list "~/Documents/org-notes/elfeed.org")))
#+end_src
* xah fly key
** pre setting
#+begin_src emacs-lisp :tangle "xah-fly.el"
(use-package! xah-fly-keys
:config
(add-hook 'xah-fly-command-mode-activate-hook
  (lambda ()
    (setq xah-fly-insert-state-q nil)))
  :init
  (require 'xah-fly-keys)
  (xah-fly-keys 1)
  ;; (xah-fly-keys-set-layout "qwerty")

  (xah-fly--define-keys
   ;; create a keymap my-keymap
   (define-prefix-command 'my-keymap)
   '(
     ("a" . counsel-ag)
     ("r" . counsel-rg)

     ;;
     ))
   (xah-fly--define-keys
   ;; create a keymap org-keymap
    (define-prefix-command 'org-keymap)
   '(
     ("r" . org-journal-read-entry)
     ("n" . org-journal-new-entry)
     ;;
     ))
  ;; make xah-fly-keys ãleader 8ã as prefix for my-keymap
  (xah-fly--define-keys
   (define-prefix-command 'xah-fly-leader-key-map)
   '(
     ("2" . org-keymap)
     ("8" . my-keymap)
     ("fr" . counsel-recentf)
     ("fp" . doom/find-file-in-private-config)
     ("<tab>" . spacemacs/alternate-buffer)
     ("ff" . counsel-file-jump)
     ("RET" . helm-bookmarks)
     ;; treemacs
     ("tt" . +treemacs/toggle)
     ("tf" . +treemacs/find-file)
     ;; helm
     ("bb" . switch-to-buffer)
     ("bs" . bookmark-set)
     ("bm" . bookmark-bmenu-list)

     ;; isearch
     ("y" . xah-search-current-word)
     ;; search
     ("sa" . counsel-ag)
     ("sr" . counsel-rg)
))
)
#+END_SRC

#+RESULTS:
: t

** one char key
#+begin_src emacs-lisp :tangle "xah-fly.el"
(defun xah-fly-command-mode-init ()
  "Set command mode keys.
Version 2017-01-21"
  (interactive)
  (xah-fly--define-keys
   xah-fly-key-map
   '(
     ;; IMPORTANT, These keys are all dvorak keys
     ("~" . nil)
     (":" . nil)

     ("SPC" . xah-fly-leader-key-map)
     ("q" . quit-window)
     ("a" . counsel-M-x)
     ("i" . previous-line)
     ("k" . next-line )
     ("b" . backward-word)
     ("h" . forward-word)
     ("l" . backward-char)
     ("j" . forward-char)
     ("f" . xah-fly-insert-mode-activate)
     ("[" . xah-backward-punct )
     ("]" . xah-forward-punct)
     ("g" . avy-goto-char-2)
     ("y" . undo)
     ("v" . xah-paste-or-paste-previous)
     ("c" . xah-copy-line-or-region)
     ("x" . xah-cut-line-or-region)
     ("t" . set-mark-command)
     ("2" . org-agenda)
     ("4". adq/helm-bm-list-all)
     ("6" . xah-select-block)
     ("7" . xah-select-line)
     ("8" . xah-extend-selection)
     ("9" . xah-select-text-in-quote)
     ("0" . xah-pop-local-mark-ring)
     ("n" . isearch-forward)
     ))
    (define-key xah-fly-key-map (kbd "p") 'gtrun-xah-fly-key)
    (define-key xah-fly-key-map (kbd "-") 'gtrun-xah-minus-fly-key)
    (define-key xah-fly-key-map (kbd "/") 'gtrun-xah-slash-fly-key)
    (define-key xah-fly-key-map (kbd ",") 'gtrun-xah-comma-fly-key)
    (define-key xah-fly-key-map (kbd ".") 'gtrun-xah-dot-fly-key)
  )
#+end_src
** xah-key-map
#+begin_src emacs-lisp :tangle "xah-fly.el"
(define-key xah-fly-key-map (kbd "C-a") 'beginning-of-visual-line)
(define-key xah-fly-key-map (kbd "C-0") 'delete-region)
(define-key xah-fly-key-map (kbd "C-n") 'next-line)
(define-key xah-fly-key-map (kbd "C-j") 'previous-line)
(define-key xah-fly-key-map (kbd "M-<SPC>") 'xah-fly-command-mode-activate)

(define-key xah-fly-key-map (kbd "C-.") 'xah-fly-command-mode-activate)
(define-key xah-fly-key-map (kbd "C-s") 'swiper-isearch)
(define-key xah-fly-key-map (kbd "C-c w") 'helm-deft)

(define-key xah-fly-key-map (kbd "p") 'gtrun-xah-fly-key)
(define-key xah-fly-key-map (kbd "-") 'gtrun-xah-minus-fly-key)
(define-key xah-fly-key-map (kbd "/") 'gtrun-xah-slash-fly-key)
(define-key xah-fly-key-map (kbd ",") 'gtrun-xah-comma-fly-key)
(define-key xah-fly-key-map (kbd ".") 'gtrun-xah-dot-fly-key)

(define-key xah-fly-key-map (kbd "C-,") 'awesome-tab-ace-jump)
(define-key xah-fly-key-map (kbd "C-;") 'maple-iedit-match-all)
(define-key xah-fly-key-map (kbd "C-c i") 'counsel-imenu)
;; scrolling
(define-key xah-fly-key-map (kbd "C-v") 'scrollkeeper-contents-up)
#+end_src

** special-key-to-mode-map
#+begin_src emacs-lisp :tangle "xah-fly.el"
   (defun gtrun-xah-dot-fly-key ()
        "key `.'"
        (interactive)
        (cond
         ;; ((eq major-mode 'dired-mode) (call-interactively 'd))
         ((eq major-mode 'dired-mode) (call-interactively 'hydra-dired/body))
         ((eq major-mode 'w3m-mode) (call-interactively 'scrollkeeper-contents-up))
         ((eq major-mode 'org-mode) (call-interactively 'org-edit-src-code))
         ((eq major-mode 'elfeed-show-mode) (call-interactively 'scrollkeeper-contents-up))
         ((eq major-mode 'elfeed-search-mode) (call-interactively 'scrollkeeper-contents-up))
         (t nil)))

      (defun gtrun-xah-comma-fly-key ()
        "key `,'"
        (interactive)
        (cond
         ;; ((eq major-mode 'dired-mode) (call-interactively 'd))
         ((eq major-mode 'w3m-mode) (call-interactively 'scrollkeeper-contents-down))
         ((eq major-mode 'elfeed-show-mode) (call-interactively 'scrollkeeper-contents-down))
         ((eq major-mode 'elfeed-search-mode) (call-interactively 'scrollkeeper-contents-down))
         (t nil)))

      (defun gtrun-xah-slash-fly-key ()
        "key `/'"
        (interactive)
        (cond
         ;; ((eq major-mode 'dired-mode) (call-interactively 'd))
         ((eq major-mode 'dired-mode) (call-interactively 'vinegar/dired-diff))
         ((eq major-mode 'w3m-mode) (call-interactively 'w3m-bookmark-add-current-url))
         ((eq major-mode 'org-agenda-mode) (call-interactively 'org-agenda-filter-by-tag))
         ((eq major-mode 'elfeed-search-mode) (call-interactively 'elfeed-update))
         (t nil)))

      (defun gtrun-xah-semicolon-fly-key ()
        "key `;'"
        (interactive)
        (cond
         ;; ((eq major-mode 'dired-mode) (call-interactively 'd))

         (t nil)))

      (defun gtrun-xah-apostrophe-fly-key ()
        "key `''"
        (interactive)
        (cond
         ;; ((eq major-mode 'dired-mode) (call-interactively 'd))

         (t nil)))
      (defun gtrun-xah-equality-fly-key ()
        "key `='"
        (interactive)
        (cond
         ;; ((eq major-mode 'dired-mode) (call-interactively 'd))
         (t nil)))


      (defun gtrun-xah-fly-key ()
        "key `p'"
        (interactive)
        (cond
         ;; ((eq major-mode 'dired-mode) (call-interactively 'd))
         ((eq major-mode 'dired-mode) (call-interactively 'xah-open-in-external-app))
         (t nil)))


      (defun gtrun-xah-minus-fly-key ()
        "key `-'"
        (interactive)
        (cond
         ;; ((eq major-mode 'dired-mode) (call-interactively 'd))
         ((eq major-mode 'dired-mode) (call-interactively 'vinegar/up-directory))
         (t nil)))
#+end_src
* Completion
** Ivy/counsel

#+begin_src emacs-lisp :tangle "config.el"
  (use-package! counsel
    :hook
    (after-init . ivy-mode)
    (counsel-grep-post-action . better-jumper-set-jump)
    :diminish ivy-mode
    :config
    (setq counsel-find-file-ignore-regexp "\\(?:^[#.]\\)\\|\\(?:[#~]$\\)\\|\\(?:^Icon?\\)"
          counsel-describe-function-function #'helpful-callable
          ncounsel-describe-variable-function #'helpful-variable
          ;; Add smart-casing (-S) to default command arguments:
          ncounsel-rg-base-command "rg -S --no-heading --line-number --color never %s ."
          counsel-ag-base-command "ag -S --nocolor --nogroup %s"
          counsel-pt-base-command "pt -S --nocolor --nogroup -e %s"
          counsel-find-file-at-point t)
       )

     (use-package! ivy-rich
       :config
       (ivy-rich-mode 1)
       (setq ivy-format-function #'ivy-format-function-line))
     ;;[[https://github.com/gilbertw1/better-jumper][gilbertw1/better-jumper: A configurable jump list implementation for Emacs]]
#+end_src
** company
#+begin_src emacs-lisp :tangle "config.el"
(after! company
  (setq company-idle-delay 0.5
        company-minimum-prefix-length 2
        company-transformers nil)
  (setq company-show-numbers t)
  (define-key company-active-map (kbd "C-n") 'company-select-next-or-abort)
  (define-key company-active-map (kbd "C-j") 'company-select-previous-or-abort)

(defun ora-company-number ()
  "Forward to `company-complete-number'.
Unless the number is potentially part of the candidate.
In that case, insert the number."
  (interactive)
  (let* ((k (this-command-keys))
         (re (concat "^" company-prefix k)))
    (if (or (cl-find-if (lambda (s) (string-match re s))
                        company-candidates)
            (> (string-to-number k)
               (length company-candidates))
            (looking-back "[0-9]+\\.[0-9]*" (line-beginning-position)))
        (self-insert-command 1)
      (company-complete-number
       (if (equal k "0")
           10
         (string-to-number k))))))

(defun ora--company-good-prefix-p (orig-fn prefix)
  (unless (and (stringp prefix) (string-match-p "\\`[0-9]+\\'" prefix))
    (funcall orig-fn prefix)))
(advice-add 'company--good-prefix-p :around #'ora--company-good-prefix-p)

(let ((map company-active-map))
  (mapc (lambda (x) (define-key map (format "%d" x) 'ora-company-number))
        (number-sequence 0 9))
  (define-key map " " (lambda ()
                        (interactive)
                        (company-abort)
                        (self-insert-command 1)))
  (define-key map (kbd "<return>") nil))
  )
(use-package! company
:config
  ;; (defun company-smart-complete ()
  ;;   (interactive)
  ;;   (setq company-echo-metadata-frontend-bypass t)
  ;;   (cond
  ;;    (company-selection-changed
  ;;     (company-complete-selection))
  ;;    (company-candidates
  ;;     (company-select-next)
  ;;     (company-complete-selection))
  ;;    (t
  ;;     (company-auto-begin)
  ;;     (company-select-next)))
)

#+end_src
** Edition
*** Maple
#+begin_src emacs-lisp :tangle "config.el"
  (use-package! maple-iedit
    :commands (maple-iedit-match-all maple-iedit-match-next maple-iedit-match-previous)
    :config
    (delete-selection-mode t)
    (setq maple-iedit-ignore-case t)
    (defhydra maple/iedit ()
      ("n" maple-iedit-match-next "next")
      ("t" maple-iedit-skip-and-match-next "skip and next")
      ("T" maple-iedit-skip-and-match-previous "skip and previous")
      ("p" maple-iedit-match-previous "prev"))
    :bind (:map maple-iedit-mode-keymap
                ("C-n" . maple-iedit-match-next)
                ("C-m" . maple-iedit-match-previous)
                ("C-," . maple-iedit-skip-and-match-next)
                ("C-." . maple-iedit-skip-and-match-previous)
                )
    )
#+end_src
** BOOkmark
#+begin_src emacs-lisp :tangle "config.el"
  (def-package! bm
    :demand t
    :init
    (setq bm-restore-repository-on-load t)
    :config

    (bind-keys
     :map bm-show-mode-map
     ("j" . next-line)
     ("k" . previous-line))

    (setq bm-cycle-all-buffers t
          bm-highlight-style 'bm-highlight-only-fringe
          bm-repository-size 1000)
    (setq-default bm-buffer-persistence t)

    (defun adq/bm-save ()
      "Save bookmarks to persistent repository."
      (interactive)
      (bm-buffer-save-all)
      (bm-repository-save))

    (advice-add 'bm-bookmark-add
                :after (lambda (&rest args)
                         (adq/bm-save)))
    (advice-add 'bm-bookmark-remove
                :after (lambda (&rest args)
                         (adq/bm-save)))
    (add-hook 'after-init-hook #'bm-repository-load)
    (add-hook 'find-file-hooks #'bm-buffer-restore)
    (add-hook 'after-rever-hook #'bm-buffer-restore)
    (add-hook 'kill-buffer-hook #'bm-buffer-save)
    (add-hook 'after-save-hook #'bm-buffer-save)
    (add-hook 'kill-emacs-hook
              (lambda ()
                (bm-buffer-save-all)
                (bm-repository-save)))

    (defun adq/bm-list-all-bookmarks ()
      "Generate a list of all bookmarks from all files."
      (let ((bookmarks '()))
        (cl-loop for entry in bm-repository
                 when (and (listp entry) (f-readable-p (car entry)))
                 do
                 (with-temp-buffer
                   (insert-file-contents-literally (car entry))
                   (cl-letf (((symbol-function 'bm-bookmark-add)
                              (lambda (&optional annotation time temporary)
                                (!cons (list (car entry)
                                             (point)
                                             (line-number-at-pos)
                                             (string-trim (thing-at-point 'line t)))
                                       bookmarks)))
                             ((symbol-function 'message)
                              (lambda (&rest _))))
                     (bm-buffer-restore-2 (cdr entry)))))
        bookmarks))

      (defun adq/helm-bm-all-format-bookmark (bookmark)
        "Format bookmark for display."
        (let ((file (f-filename (car bookmark)))
              (line (caddr bookmark))
              (contents (cadddr bookmark)))
          (cons
           (format "%s:%s: %s"
                   (propertize file 'face compilation-info-face)
                   (propertize (format "%d" line) 'face compilation-line-face)
                   contents)
           bookmark)))

      (defvar adq/helm-bm-all-source
        (helm-build-sync-source "Helm All Bookmarks"
          :candidates
          (lambda ()
            (mapcar #'adq/helm-bm-all-format-bookmark
                    (adq/bm-list-all-bookmarks)))
          :action
          '(("Switch to buffer" .
             (lambda (bookmark)
               (find-file (car bookmark))
               (goto-char (cadr bookmark))))))
        "Helm source with all the bookmarks.")

      (defun adq/helm-bm-list-all ()
        "List all bookmarks usin Helm."
        (interactive)
        (helm :sources 'adq/helm-bm-all-source
              :buffer "*helm bm all*"))

    (defhydra adq/hydra-bm nil
      "
  Bookmarks
  ^^^^------------------------------------------------
  _m_: Toggle      _l_: Bookmarks from Buffers
  _n_: Next        _a_: Bookmarks form All Files
  _p_: Previous    _L_: List
  "
      ("m" bm-toggle)
      ("n" bm-next)
      ("p" bm-previous)
      ("a" adq/helm-bm-list-all :exit t)
      ("l" helm-bm :exit t)
      ("L" bm-show-all :exit t))
    (bind-key "C-c m" #'adq/hydra-bm/body))
#+end_src


** templating
#+begin_src emacs-lisp :tangle yes
(use-package! yatemplate
  :after yasnippet
  :config

  ;; Define template directory
  (setq yatemplate-dir (concat doom-private-dir "modules/templates"))

  ;; Coupling with auto-insert
  (setq auto-insert-alist nil)
  (yatemplate-fill-alist)
  (add-hook 'find-file-hook 'auto-insert)
  )
#+end_src

** scroll
#+begin_src emacs-lisp :tangle "config.el"
;; (use-package! fast-scroll
;; :config
;; (setq fast-scroll-throttle 0.5)
;; (add-hook 'fast-scroll-start-hook (lambda () (flycheck-mode -1)))
;; (add-hook 'fast-scroll-end-hook (lambda () (flycheck-mode 1)))
;; (fast-scroll-config)
;; (fast-scroll-mode 1)
;; )
(use-package! scrollkeeper)
(global-set-key [remap scroll-up-command] #'scrollkeeper-contents-up)
(global-set-key [remap scroll-down-command] #'scrollkeeper-contents-down)
#+end_src

* Visual
** Buffer
*** Parenthesis
#+begin_src emacs-lisp :tangle "config.el"
  (use-package! rainbow-delimiters
    :config
    (custom-set-faces
     '(rainbow-delimiters-mismatched-face ((t (:foreground "white" :background "red" :weight bold))))
     '(rainbow-delimiters-unmatched-face ((t (:foreground "white" :background "red" :weight bold))))

     ;; show parents (in case of rainbow failing !)
     '(show-paren-match ((t (:foreground "white" :background "green" :weight bold))))
     '(show-paren-mismatch ((t (:foreground "white" :background "red" :weight bold)))))
    ;;  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
)
;; highlight brackets
(setq show-paren-style 'parenthesis)
#+end_src
*** eysbrowse
#+begin_src emacs-lisp :tangle "config.el"
(use-package! eyebrowse
  :config
  (progn
    (define-key eyebrowse-mode-map (kbd "M-1") 'eyebrowse-switch-to-window-config-1)
    (define-key eyebrowse-mode-map (kbd "M-2") 'eyebrowse-switch-to-window-config-2)
    (define-key eyebrowse-mode-map (kbd "M-3") 'eyebrowse-switch-to-window-config-3)
    (define-key eyebrowse-mode-map (kbd "M-4") 'eyebrowse-switch-to-window-config-4)
    (define-key eyebrowse-mode-map (kbd "M-5") 'eyebrowse-switch-to-window-config-5)
    (eyebrowse-mode t)
    (setq eyebrowse-new-workspace t)))
    #+end_src
** window
*** tab
#+begin_src emacs-lisp :tangle "config.el"
(use-package! awesome-tab
:config
(awesome-tab-mode t)
(setq awesome-tab-style 'slant)
;; winum users can use `winum-select-window-by-number' directly.
(defun my-select-window-by-number (win-id)
  "Use `ace-window' to select the window by using window index.
WIN-ID : Window index."
  (let ((wnd (nth (- win-id 1) (aw-window-list))))
    (if wnd
        (aw-switch-to-window wnd)
      (message "No such window."))))

(defun my-select-window ()
  (interactive)
  (let* ((event last-input-event)
         (key (make-vector 1 event))
         (key-desc (key-description key)))
    (my-select-window-by-number
     (string-to-number (car (nreverse (split-string key-desc "-")))))))

(when (not (display-graphic-p))
  (setq frame-background-mode 'dark))
(defun awesome-tab-buffer-groups ()
  "`awesome-tab-buffer-groups' control buffers' group rules.

Group awesome-tab with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
All buffer name start with * will group to \"Emacs\".
Other buffer group by `awesome-tab-get-group-name' with project name."
  (list
   (cond
    ((or (string-equal "*" (substring (buffer-name) 0 1))
         (memq major-mode '(magit-process-mode
                            magit-status-mode
                            magit-diff-mode
                            magit-log-mode
                            magit-file-mode
                            magit-blob-mode
                            magit-blame-mode
                            )))
     "Emacs")
    ((derived-mode-p 'eshell-mode)
     "EShell")
    ((derived-mode-p 'emacs-lisp-mode)
     "Elisp")
    ((derived-mode-p 'dired-mode)
     "Dired")
    ((memq major-mode '(org-mode org-agenda-mode diary-mode))
     "OrgMode")
    (t
     (awesome-tab-get-group-name (current-buffer))))))
)
;; (setq awesome-tab-style "bar")
;; (setq awesome-tab-set-icons t)
;; (setq awesome-tab-set-bar t)
;; (setq awesome-tab-set-bar 'over)
;; (setq awesome-tab-set-modified-marker t)
;; (setq awesome-tab-set-close-button nil)
;; (setq awesome-tab-modified-marker "*")
;; ("C-c j" .  awesome-tab-forward-group)
;; ("C-c k" .  awesome-tab-backward-group)
;; ("C-c o" . awesome-tab-switch-group)

#+end_src
*** font
#+begin_src emacs-lisp :tangle "config.el"
;; (use-package! cnfonts)
;;  (set-face-attribute
;;    'default nil
;;    :font (font-spec :name "-PfEd-Fantasque Sans Mono-normal-italic-normal-*-*-*-*-*-m-0-iso10646-1"
;;                     :weight 'normal
;;                     :slant 'normal
;;                     :size 12.5))
;; (defun s-font()
;;   (interactive)
;;   (dolist (charset '(kana han symbol cjk-misc bopomofo))
;;     (set-fontset-font
;;      (frame-parameter nil 'font)
;;      charset
;;      (font-spec :name "-GWIN-æ¥·ä½_GB2312-normal-normal-normal-*-*-*-*-*-d-0-iso10646-1"
;;                 :weight 'normal
;;                 :slant 'normal
;;                 :size 12.0)))
;;   (add-to-list 'after-make-frame-functions
;;              (lambda (new-frame)
;;                (select-frame new-frame)
;;                (if window-system
;;                    (s-font))))
;; (if window-system
;;     (s-font))
;;   )
#+end_src
** mode
* lang
setting
** setting
#+begin_src emacs-lisp :tangle "my-code.el"


#+end_src


** nix
#+begin_src emacs-lisp :tangle "my-code.el"
#+end_src
** ccls
#+begin_src emacs-lisp :tangle "my-code.el"
(use-package! ccls
  :hook ((c-mode c++-mode objc-mode cuda-mode) .
         (lambda () (require 'ccls) (lsp))))

#+end_src
** jupyter
#+begin_src emacs-lisp :tangle "config.el"
(use-package! jupyter
:config
(setq ob-async-no-async-languages-alist '("jupyter-python" "jupyter-julia"))
)
#+end_src

* chinese
** pinyinlib
#+begin_src emacs-lisp :tangle "config.el"
(def-package! pinyinlib
  :config

  
  (defun re-builder-extended-pattern (str)
    (let* ((len (length str)))
      (cond
       ;; do nothing
       ((<= (length str) 0))

       ;; If the first charater of input in ivy is ":",
       ;; remaining input is converted into Chinese pinyin regex.
       ((string= (substring str 0 1) ":")
        (setq str (pinyinlib-build-regexp-string (substring str 1 len) t)))

       ;; If the first charater of input in ivy is "/",
       ;; remaining input is converted to pattrn to search camel case word
       ((string= (substring str 0 1) "/")
        (let* ((rlt "")
               (i 0)
               (subs (substring str 1 len))
               c)
          (when (> len 2)
            (setq subs (upcase subs))
            (while (< i (length subs))
              (setq c (elt subs i))
              (setq rlt (concat rlt (cond
                                     ((and (< c ?a) (> c ?z) (< c ?A) (> c ?Z))
                                      (format "%c" c))
                                     (t
                                      (concat (if (= i 0) (format "[%c%c]" (+ c 32) c)
                                                (format "%c" c))
                                              "[a-z]+")))))
              (setq i (1+ i))))
          (setq str rlt))))
      (ivy--regex-plus str)))


  (eval-after-load 'ivy
    '(progn
       ;; better performance on everything (especially windows), ivy-0.10.0 required
       ;; @see https://github.com/abo-abo/swiper/issues/1218
       (setq ivy-dynamic-exhibit-delay-ms 250)

       ;; Press C-p and Enter to select current input as candidate
       ;; https://oremacs.com/2017/11/30/ivy-0.10.0/
       (setq ivy-use-selectable-prompt t)

       (setq ivy-re-builders-alist
             '((t . re-builder-extended-pattern)))
       ;; set actions when running C-x b
       ;; replace "frame" with window to open in new window
       (ivy-set-actions
        'ivy-switch-buffer-by-pinyin
        '(("j" switch-to-buffer-other-frame "other frame")
          ("k" kill-buffer "kill")
          ("r" ivy--rename-buffer-action "rename")))))
  (with-eval-after-load "swiper-isearch"
    (setq ivy-re-builders-alist
          '((t . re-builder-extended-pattern)
            (t . ivy-prescient-re-builder))))
  )
#+end_src

* load & unload
** after-init
#+begin_src emacs-lisp :tangle "packages.el"
(disable-packages! pyim)
(disable-packages! company-go)
#+end_src
* set face
#+begin_src emacs-lisp :tangle "config.el"
;; (custom-set-faces
;;   '(awesome-tab-close-selected((t ( :foreground "DarkGray"))))
;;   )
#+end_src
* Linux & Macsos
** Linux
#+begin_src emacs-lisp :tangle "config.el"
(use-package! my-linux
  :load-path "./modules"
  :if (eq system-type 'gnu/linux)
  :config
  (setq-default cursor-type 'box)
  (blink-cursor-mode -1)
  (set-cursor-color "IndianRed3")
  (setq bm-repository-file (f-join doom-private-dir "etc/bm-linux-data"))
  (setq bookmark-default-file
        (concat doom-private-dir "etc/bookmark-linux-default.el"))
  (setq lsp-python-ms-executable
        "~/.nix-profile/bin/mspyls")
  (setq jupyter-runtime-directory "~/.local/share/jupyter/runtime")
  (add-hook 'ob-async-pre-execute-src-block-hook
            '(lambda ()
               (setq inferior-julia-program-name "/nix/store/qzpr1kwkhnz55mdlq8skc5sqrc6l2j2b-system-path/bin/julia")
               ))
  (after! org
    (setq +org-dir  (expand-file-name "~/Documents/org-notes"))
    ;; (setq-default
    ;;  org-agenda-files (directory-files +org-dir t "\\.org$" t))
    (setq inferior-julia-program-name "/nix/store/qzpr1kwkhnz55mdlq8skc5sqrc6l2j2b-system-path/bin/julia")
    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((emacs-lisp . t)
                                   (dot . t)
                                   (ditaa . t)
                                   (R . t)
                                   (python . t)
                                   (gnuplot . t)
                                   (lisp . t)
                                   (shell . t)
                                   (org . t)
                                   (plantuml . t)
                                   (latex . t)
                                   (julia . t)
                                   (haskell . t)
                                   (jupyter . t)
                                   ))
    )
  )
#+end_src

#+begin_src emacs-lisp :tangle "./modules/my-linux.el"
(provide 'my-linux)
#+end_src
** MacOS
#+begin_src emacs-lisp :tangle "config.el"
(use-package! my-macos
:load-path "./modules"
:if (memq window-system '(mac ns))
:config
 (setq bookmark-default-file
        (concat doom-private-dir "etc/bookmark-macos-default.el"))
(setq-default cursor-type 'box)
(blink-cursor-mode -1)
(set-cursor-color "yellow1")
(setq bm-repository-file (f-join doom-private-dir "etc/bm-macos-data"))
(setq insert-directory-program "/usr/local/bin/gls")
(define-key org-mode-map (kbd "C-c l") 'org-mac-grab-link)
(set-face-attribute
 'default nil
 :font (font-spec :name "-*-Fantasque Sans Mono-normal-normal-normal-*-*-*-*-*-m-0-iso10646-1"
                  :weight 'normal
                  :slant 'normal
                  :size 24.0))
(dolist (charset '(kana han symbol cjk-misc bopomofo))
  (set-fontset-font
   (frame-parameter nil 'font)
   charset
   (font-spec :name "-*-STFangsong-normal-normal-normal-*-*-*-*-*-p-0-iso10646-1"
              :weight 'normal
              :slant 'normal
              :size 24.5)))
(after! org
  (setq +org-dir  (expand-file-name "~/Documents/org-notes"))
  ;; (setq-default
  ;;  org-agenda-files (directory-files +org-dir t "\\.org$" t))
  (setq inferior-julia-program-name "/usr/local/bin/julia")
  (org-babel-do-load-languages 'org-babel-load-languages
                               '((emacs-lisp . t)
                                 (dot . t)
                                 (ditaa . t)
                                 (R . t)
                                 (python . t)
                                 (gnuplot . t)
                                 (lisp . t)
                                 (shell . t)
                                 (org . t)
                                 (plantuml . t)
                                 (latex . t)
                                 (julia . t)
                                 (haskell . t)
                                 (jupyter . t)
                                 ))
  )
)
#+end_src
** macos-setting
#+begin_src emacs-lisp :tangle "./modules/my-macos.el"
(use-package! cnfonts)

(define-key! awesome-tab-mode-map
  "s-1" #'awesome-tab-select-visible-tab
  "s-2" #'awesome-tab-select-visible-tab
  "s-3" #'awesome-tab-select-visible-tab
  "s-4" #'awesome-tab-select-visible-tab
  "s-5" #'awesome-tab-select-visible-tab
  "s-6" #'awesome-tab-select-visible-tab
  "s-7" #'awesome-tab-select-visible-tab
  "s-8" #'awesome-tab-select-visible-tab
  "s-9" #'awesome-tab-select-visible-tab
  )
(provide 'my-macos)
#+end_src
