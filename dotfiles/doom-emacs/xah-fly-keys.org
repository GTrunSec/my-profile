
#+AUTHOR: GTrunSec
#+EMAIL: gtrunsec@hardenedlinux.org
#+DATE: 30 December 2019
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en cn
#+SETUPFILE: ~/Documents/my-blog/public/theme/org-html-themes/setup/theme-readtheorg.setup
#+hugo_publishdate: (0 5)
#+hugo_auto_set_lastmod: t
#+HUGO_categories:
#+HUGO_tags:
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
- [[http://ergoemacs.org/misc/xah-fly-keys_customization.html][Emacs: Xah Fly Keys Customization]]
- [[http://ergoemacs.org/misc/xah-fly-keys_tutorial.html][Emacs: Xah Fly Keys Tutorial]]

* use package with xah-fly-keys
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
(use-package! xah-fly-keys
  :config
  (xah-fly-keys 1)
  )
#+END_SRC

* define-key xah-fly-keys-map(Command mode)
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
;; (xah-fly--define-keys
;;  xah-fly-command-map
;;  '(

;;    ("C-n" . next-line)
;;    ))
#+end_src

* define-key xah-fly-keys-map(Insert mode)
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
(defun xah-fly-insert-mode-init ()
  (xah-fly--define-keys
   xah-fly-key-map
   '(
     ("SPC" . nil)
     ("DEL" . nil)

     ("a" . nil)
     ("b" . nil)
     ("c" . nil)
     ("d" . nil)
     ("e" . nil)
     ("f" . nil)
     ("g" . nil)
     ("h" . nil)
     ("i" . nil)
     ("j" . nil)
     ("k" . nil)
     ("l" . nil)
     ("m" . nil)
     ("n" . nil)
     ("o" . nil)
     ("p" . nil)
     ("k" . nil)
     ("o" . nil)
     ("r" . nil)
     ("s" . nil)
     ("t" . nil)
     ("u" . nil)
     ("v" . nil)
     ("w" . nil)
     ("x" . nil)
     ("y" . nil)
     ("z" . nil)

     ("/" . nil)
     ("-" . nil)
     ("." . nil)
     ("," . nil)
     (";" . nil)
     ("'" . nil)
     ("[" . nil)
     ("]" . nil)

     ("C-;" . maple-iedit-match-all)
     ("C-n" . next-line)
     ("C-s" . swiper-isearch)
     ("C-c i" . counsel-imenu)
     ("C-v" . scrollkeeper-contents-up)
     ("C-x c" . xah-fly-command-mode-activate)

     ("<f3>" . gtrun/hydra-org-starter/body)
     ("<f4>" . xah-fly-command-mode-activate)
     ("<f5>" . awesome-tab-ace-jump)
     ;; more
     ))
  )
#+end_src
* define-key xah-fly-keys-map (Key-mode)
- [[https://github.com/xahlee/xah-fly-keys/blob/master/xah-fly-keys.el#L3392][xah-fly-keys/xah-fly-keys.el at master Â· xahlee/xah-fly-keys]]
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
(defun xah-fly-command-mode-init ()
  (interactive)
  (xah-fly--define-keys
   xah-fly-key-map
   '(
     ("SPC" . xah-fly-leader-key-map)

     ("a" . counsel-M-x)
     ("c" . xah-copy-line-or-region)

     ("f" . xah-fly-insert-mode-activate)
     ("b" . backward-word)
     ("h" . forward-word-forward)

     ("n" . isearch-forward)
     ("m" . isearch-backward)
     ("i" . previous-line)
     ("k" . next-line)
     ("l" . backward-char)
     ("j" . forward-char)
     ("q" . quit-window)
     ("t" . set-mark-command)
     ("u" . undo-fu-only-redo)
     ("v" . xah-paste-or-paste-previous)
     ("x" . xah-cut-line-or-region)
     ("y" . undo-fu-only-undo)
     ("[" . xah-backward-punct )
     ("]" . xah-forward-punct)


     ("<f3>" . gtrun/hydra-org-starter/body)
     ("<f4>" . xah-fly-command-mode-activate)
     ("<f4>" . xah-fly-command-mode-activate)
     ))
   (define-key xah-fly-key-map (kbd ".") 'gtrun-xah-fly-keys-dot)
   )
;; (define-key xah-fly-key-map (kbd "C-c w") 'helm-org-rifle)
#+end_src

* specific key in different mode map
** load all of specific keys
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
;; (define-key xah-fly-key-map (kbd "p") 'gtrun-xah-fly-keys-p)
;; (define-key xah-fly-key-map (kbd "s-p") 'gtrun-xah-fly-keys-P)
;; (define-key xah-fly-key-map (kbd "-") 'gtrun-xah-fly-keys-minus)
;; (define-key xah-fly-key-map (kbd "/") 'gtrun-xah-fly-keys-slash)
;; (define-key xah-fly-key-map (kbd ",") 'gtrun-xah-fly-keys-comma)

(when (display-graphic-p)
 (define-key key-translation-map (kbd "ESC") (kbd "C-x c"))
)
#+end_src
** Only Linux keys
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
;; (when (eq system-type 'gnu/linux)
;;   (define-key xah-fly-key-map (kbd "r") 'eaf-open)
;;   (define-key xah-fly-key-map (kbd "w") 'snails)
;;   )
#+end_src
** .-dot
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
(defun gtrun-xah-fly-keys-dot ()
  "key `.'"
  (interactive)
  (cond
   ((eq major-mode 'org-mode) (call-interactively 'org-edit-src-code))
   ((eq major-mode 'org-tanglesync-mode) (call-interactively 'org-edit-src-code))
   ((eq major-mode 'elfeed-search-mode) (call-interactively 'scrollkeeper-contents-up))
   (t nil)))
#+end_src

** ,-comma
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
(defun gtrun-xah-fly-keys-comma ()
  "key `,'"
  (interactive)
  (cond
   ;; ((eq major-mode 'dired-mode) (call-interactively 'd))
   ((eq major-mode 'w3m-mode) (call-interactively 'scrollkeeper-contents-down))
   ((eq major-mode 'elfeed-show-mode) (call-interactively 'scrollkeeper-contents-down))
   ((eq major-mode 'elfeed-search-mode) (call-interactively 'scrollkeeper-contents-down))
   (t nil)))
#+end_src

** /-slash
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
(defun gtrun-xah-fly-keys-slash ()
  "key `/'"
  (interactive)
  (cond
   ;; ((eq major-mode 'dired-mode) (call-interactively 'd))
   ((eq major-mode 'dired-mode) (call-interactively 'vinegar/dired-diff))
   ((eq major-mode 'w3m-mode) (call-interactively 'w3m-bookmark-add-current-url))
   ((eq major-mode 'org-agenda-mode) (call-interactively 'org-agenda-filter-by-tag))
   ((eq major-mode 'elfeed-search-mode) (call-interactively 'elfeed-update))
   ((eq major-mode 'ess-julia-mode) (call-interactively 'julia-mode))
   (t nil)))
#+end_src

** ;-semicolon
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
(defun gtrun-xah-fly-keys-semicolon ()
  "key `;'"
  (interactive)
  (cond
   ;; ((eq major-mode 'dired-mode) (call-interactively 'd))

   (t nil)))
#+end_src
** '-apostrophe
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
(defun gtrun-xah-fly-keys-apostrophe ()
  "key `''" 
  (interactive)
  (cond
   ;; ((eq major-mode 'dired-mode) (call-interactively 'd))

   (t nil)))
#+end_src

** ""
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
(defun gtrun-xah-equality-fly-keys ()
  "key `='"
  (interactive)
  (cond
   ;; ((eq major-mode 'dired-mode) (call-interactively 'd))
   (t nil)))

#+end_src

** ""
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
(defun gtrun-xah-fly-keys-p ()
  "key `p'"
  (interactive)
  (cond
   ;; ((eq major-mode 'dired-mode) (call-interactively 'd))
   ((eq major-mode 'dired-mode) (call-interactively 'xah-open-in-external-app))
   (t nil)))

#+end_src

** ""
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
(defun gtrun-xah-fly-keys-P ()
  "key `P'"
  (interactive)
  (cond
   ;; ((eq major-mode 'dired-mode) (call-interactively 'd))
   ((eq major-mode 'dired-mode) (call-interactively 'xah-show-in-desktop))
   (t nil)))
#+end_src

** ""
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
(defun gtrun-xah-minus-fly-keys ()
  "key `-'"
  (interactive)
  (cond
   ;; ((eq major-mode 'dired-mode) (call-interactively 'd))
   ((eq major-mode 'dired-mode) (call-interactively 'vinegar/up-directory))
   (t nil)))
#+end_src
** Color
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
;; (defun my-highlight-line-on () (global-hl-line-mode 1))
;; (defun my-highlight-line-off () (global-hl-line-mode 0))

;; (add-hook! 'xah-fly-command-mode-activate-hook 'my-highlight-line-on)
;; (add-hook! 'xah-fly-insert-mode-activate-hook  'my-highlight-line-off)

;; (defun my-xfk-command-color () (set-background-color "DeepSkyBlue"))
;; (defun my-xfk-insert-color () (set-background-color "IndianRed"))

;; (add-hook! 'xah-fly-command-mode-activate-hook 'my-xfk-command-color)
;; (add-hook! 'xah-fly-insert-mode-activate-hook  'my-xfk-insert-color)
#+end_src

* xah-fly-leader-key-map
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
  (xah-fly--define-keys
   (define-prefix-command 'xah-fly-leader-key-map)
   '(
     ("m" . magit-keys)
     ;;timer
     ("ti" . insert-current-date-time-inactive)
     ("ta" . insert-current-date-time-active)
     ("tc" . insert-current-date-time)
     ;;find file
     ("fr" . counsel-recentf)
     ("fp" . doom/find-file-in-private-config)
     ("<tab>" . spacemacs/alternate-buffer)
     ("ff" . counsel-file-jump)
     ("RET" . helm-bookmarks)
     ;; treemacs
     ("tt" . +treemacs/toggle)
     ("tf" . +treemacs/find-file)
     ;; helm
     ("bb" . switch-to-buffer)
     ("bs" . bookmark-set)
     ("bm" . bookmark-bmenu-list)
     ("bt" . bm-toggle)
     ;; isearch
     ("y" . xah-search-current-word)
     ;; search
     ("sa" . counsel-ag)
     ("sr" . counsel-rg)
     ;; dired
     ("dw" . dired-other-window)
     ("df" . dired-other-frame)
))

#+END_SRC

* magit
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
  (xah-fly--define-keys
   ;; create a keymap org-keymap
   (define-prefix-command 'magit-keys)
   '(
     ("s" . magit)
     ))
#+end_src
