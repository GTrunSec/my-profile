#+TITLE: Meow


* [[https://github.com/DogLooksGood/meow][DogLooksGood/meow: modular Emacs on wish]]
* use-package with meow
#+begin_src emacs-lisp :tangle "meow.el"
;;; meow.el -*- lexical-binding: t; -*-
(use-package! meow
  ;; If you set `use-package-always-defer' to t
  ;; :demand nil
  :init
  (meow-global-mode 1)
  :config
  ;; meow-setup is your custom function, see below
  ;; If you want relative line number in NORMAL state(for display-line-numbers-mode)
  (meow-setup-line-number)
  ;; If you need setup indicator, see `meow-indicator' for customizing by hand.
  (meow-setup-indicator)
#+end_src

* meow setup keys

#+begin_src emacs-lisp :tangle "meow.el"
(defun meow-setup ()
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-dvorak)
  (meow-leader-define-key
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument))
  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("<" . meow-beginning-of-thing)
   '(">" . meow-end-of-thing)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("C" . meow-change-save)
   '("d" . meow-delete)
   '("e" . meow-line)
   '("f" . meow-find)
   '("F" . meow-find-expand)
   '("g" . meow-keyboard-quit)
   '("G" . meow-goto-line)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-join)
   '("J" . delete-indentation)
   '("k" . meow-kill)
   '("l" . meow-till)
   '("L" . meow-till-expand)
   '("m" . meow-mark-word)
   '("M" . meow-mark-symbol)
   '("n" . meow-next)
   '("N" . meow-next-expand)
   '("o" . meow-block)
   '("O" . meow-block-expand)
   '("p" . meow-prev)
   '("P" . meow-prev-expand)
   '("q" . meow-quit)
   '("r" . meow-replace)
   '("R" . meow-replace-save)
   '("s" . meow-search)
   '("S" . meow-pop-search)
   '("t" . meow-right)
   '("T" . meow-right-expand)
   '("u" . undo)
   '("v" . meow-visit)
   '("w" . meow-next-word)
   '("W" . meow-next-symbol)
   '("x" . meow-save)
   '("y" . meow-yank)
   '("z" . meow-pop-selection)
   '("Z" . meow-pop-all-selection)
   '("&" . meow-query-replace)
   '("%" . meow-query-replace-regexp)
   '("<escape>" . meow-last-buffer)))
  (meow-setup)
#+end_src

#+RESULTS:
| meow-expand-0 | meow-expand-9 | meow-expand-8 | meow-expand-7 | meow-expand-6 | meow-expand-5 | meow-expand-4 | meow-expand-3 | meow-expand-2 | meow-expand-1 | negative-argument | meow-reverse | meow-inner-of-thing | meow-bounds-of-thing | meow-beginning-of-thing | meow-end-of-thing | meow-append | meow-open-below | meow-back-word | meow-back-symbol | meow-change | meow-change-save | meow-delete | meow-line | meow-find | meow-find-expand | meow-keyboard-quit | meow-goto-line | meow-left | meow-left-expand | meow-insert | meow-open-above | meow-join | delete-indentation | meow-kill | meow-till | meow-till-expand | meow-mark-word | meow-mark-symbol | meow-next | meow-next-expand | meow-block | meow-block-expand | meow-prev | meow-prev-expand | meow-quit | meow-replace | meow-replace-save | meow-search | meow-pop-search | meow-right | meow-right-expand | undo | meow-visit | meow-next-word | meow-next-symbol | meow-save | meow-yank | meow-pop-selection | meow-pop-all-selection | meow-query-replace | meow-query-replace-regexp | meow-last-buffer |

* Leader Key

#+begin_src emacs-lisp :tangle "meow.el"
(meow-leader-define-key
  '("d" . dired)
  '("r" . counsel-recentf)
  '("f" . find-file)
)
#+end_src

#+RESULTS:
| dired | counsel-recentf | find-file |
* define global-set-key
#+begin_src emacs-lisp :tangle "xah-fly-keys.el"
(global-set-key (kbd "<f3>") 'gtrun/hydra-org-starter/body)
(global-set-key (kbd "<f4>") 'save-buffer)
(global-set-key (kbd "<f5>") 'notdeft)
(global-set-key (kbd "C-s") 'swiper)
#+end_src


#+RESULTS:
: swiper

* end line of meow setting

#+begin_src emacs-lisp :tangle "meow.el"
 )
#+end_src
