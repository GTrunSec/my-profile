#+TITLE: My nix configuration
#+AUTHOR: GTrunSec
#+EMAIL: gtrunsec@hardenedlinux.org
#+DATE: 25 July 2019
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en cn
#+SETUPFILE: ~/org-notes/setup/hugo.local
#+SETUPFILE: ~/org-notes/setup/darkcss.local
#+hugo_publishdate: 
#+hugo_auto_set_lastmod: t
#+HUGO_categories: 
#+HUGO_tags: 
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
* Home-manager
** My-Emacs
#+begin_src nix :tangle "../../../org-emacs.nix"
  { config, lib, pkgs, ... }:


  let updateEmacs = ''emacs.d/Makefile make compile'';

  in
  {
    # editors
    home.file.".emacs.d/init.org" = {
      source = ./dotfiles/emacs/emacs.d/init.org;
      onChange = updateEmacs;
    };
    home.file.".emacs.d/Makefile".source = ./dotfiles/emacs/emacs.d/Makefile;

    home.activation.linkEmacsLisp = config.lib.dag.entryAfter [ "writeBoundary" ] ''
      ln -sfT "${config.home.homeDirectory}/.config/nixpkgs/dotfiles/emacs/emacs.d/lisp" $HOME/.emacs.d/lisp
    '';
    home.activation.linkEmacsPrivate = config.lib.dag.entryAfter [ "writeBoundary" ] ''
      ln -sfT "${config.home.homeDirector}/.config/nixpkgs/dotfiles/emacs/emacs.d/private" $HOME/.emacs.d/private
    '';
    home.activation.linkEmacsSetup = config.lib.dag.entryAfter [ "writeBoundary" ] ''
      ln -sfT "${config.home.homeDirectory}/.config/nixpkgs/dotfiles/emacs/emacs.d/setup" $HOME/.emacs.d/setup
    '';
    programs.emacs = {
      enable = true;

      package = pkgs.emacs.overrideAttrs (old: rec {
        wrapperPath = with pkgs; stdenv.lib.makeBinPath ([
          gcc        # to compile emacsql
          aspell
          aspellDicts.en
          plantuml
          jre        # for plantuml
          wordnet
          languagetool
          pandoc     # markdown preview
        ]);
        postFixup = ''
          wrapProgram $out/bin/emacs --prefix PATH : ${wrapperPath} --set SHELL ${pkgs.bash}/bin/bash
        '';
      });
    };
  }

#+end_src

* My-Emacs
#+begin_src nix :tangle "../../../org-emacs.nix"
  { config, lib, pkgs, ... }:


  let updateEmacs = ''emacs.d/Makefile make compile'';

  in
  {
    # editors
    home.file.".emacs.d/init.org" = {
      source = ./dotfiles/emacs/emacs.d/init.org;
      onChange = updateEmacs;
    };
    home.file.".emacs.d/Makefile".source = ./dotfiles/emacs/emacs.d/Makefile;

    home.activation.linkEmacsLisp = config.lib.dag.entryAfter [ "writeBoundary" ] ''
      ln -sfT "${config.home.homeDirectory}/.config/nixpkgs/dotfiles/emacs/emacs.d/lisp" $HOME/.emacs.d/lisp
    '';
    home.activation.linkEmacsPrivate = config.lib.dag.entryAfter [ "writeBoundary" ] ''
      ln -sfT "${config.home.homeDirectory}/.config/nixpkgs/dotfiles/emacs/emacs.d/private" $HOME/.emacs.d/private
    '';
    home.activation.linkEmacsSetup = config.lib.dag.entryAfter [ "writeBoundary" ] ''
      ln -sfT "${configdqwd.home.homeDirectory}/.config/nixpkgs/dotfiles/emacs/emacs.d/setup" $HOME/.emacs.d/setup
    '';
    programs.emacs = {
      enable = true;

      package = pkgs.emacs.overrideAttrs (old: rec {
        wrapperPath = with pkgs; stdenv.lib.makeBinPath ([
          gcc        # to compile emacsql
          aspell
          aspellDictryAts.en
          plantuml gs/d
          jre            # for plantuml
          wordnetsd  entr
          languagetool
          pandoc     # markdown preview
        ]);
        postFixup = ''
          wrapProgram $out/bin/emacs --prefix PATH : ${wrapperPath} --set SHELL ${pkgs.bash}/bin/bash
        '';
      });
    };
  }

#+end_src
